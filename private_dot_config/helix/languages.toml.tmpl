[[language]]
name = "rust"
language-servers = [ "scls", "rust-analyzer"]

[[language]]
name = "cpp"
formatter = { command = "clang-format", args = ["--assume-filename", ".cpp"] }
auto-format = true

[[language]]
name = "c"
formatter = { command = "clang-format", args = ["--assume-filename", ".c"] }
auto-format = true

[[language]]
name = "latex"
language-servers = ["ltex-ls"]

[[language]]
name = "markdown"
language-servers = ["marksman"]
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "markdown"] }

[[language]]
name = "typescript"
language-servers = ["typescript-language-server", "emmet-ls", "eslint"]
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "typescript" ]}
auto-format = true

[[language]]
name = "tsx"
language-servers = ["typescript-language-server", "emmet-ls", "eslint"]
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "tsx" ]}
auto-format = true

[[language]]
name = "javascript"
language-servers = ["typescript-language-server", "emmet-ls", "eslint"]
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "javascript" ]}
auto-format = true

[[language]]
name = "jsx"
language-servers = ["typescript-language-server", "emmet-ls", "eslint"]
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "jsx" ]}
auto-format = true

[[language]]
name = "json"
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "json" ]}
auto-format = true

[[language]]
name = "html"
language-servers = ["emmet-ls", "vscode-html-language-server"]
formatter = { command = "prettier", args = [ "--parser", "html" ]}
auto-format = true

[[language]]
name = "css"
language-servers = ["emmet-ls", "css-languageserver"]
formatter = { command = "prettier", args = [ "--parser", "css" ]}
auto-format = true

[[language]]
name = "nix"
formatter = { command = "nixfmt" }
auto-format = true

[[language]]
name = "python"
language-servers = [ "pylsp" ]
formatter = { command = "black", args = ["--quiet", "-"] }

[[language]]
name = "bash"
formatter = { command = "shfmt" }

[[language]]
name = "dockerfile"
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "dockerfile" ] }

[[language]]
name = "toml"
language-servers = ["taplo"]
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "toml" ] }

[[language]]
name = "yaml"
formatter = { command = "dprint", args = [ "fmt", "--config", "~/.config/dprint.json", "--stdin", "yaml" ] }

[language-server.rust-analyzer.config]
cargo = { allFeatures = true, targetDir = true }
check = { command = "clippy", args = ["--all-targets", "--workspace", "--all-features"] }
except-features = ["format"]
diagnostics.experimental.enable = true

[language-server.scls]
command = "simple-completion-language-server"

[language-server.scls.config]
max_completion_items = 20            # set max completion results len for each group: words, snippets, unicode-input
snippets_first = false                # completions will return before snippets by default
snippets_inline_by_word_tail = false # suggest snippets by WORD tail, for example text `xsq|` become `x^2|` when snippet `sq` has body `^2`
feature_words = true                 # enable completion by word
feature_snippets = true              # enable snippets
feature_unicode_input = true         # enable "unicode input"
feature_paths = true                 # enable path completion
feature_citations = false            # enable citation completion (only on `citation` feature enabled)


# # write logs to /tmp/completion.log
# [language-server.scls.environment]
# RUST_LOG = "info,simple-completion-language-server=info"
# LOG_FILE = "/tmp/completion.log"

[language-server]
clangd = { command = "clangd", args = ["--clang-tidy"] }

[language-server.ltex-ls]
command = "ltex-ls"

[language-server.ltex-ls.config]
ltex.language = "en-GB"
ltex.dictionary = { "en-GB" = [":{{ .chezmoi.homeDir }}/.config/helix/en_gb.dic"], "fr-FR" = [":{{ .chezmoi.homeDir }}/helix/fr_fr.dic"] }

[language-server.eslint]
command = "eslint"
args = ["--stdin"]

[language-server.eslint.config]
codeActionsOnSave = { mode = "all", "source.fixAll.eslint" = true }
format = { enable = true }
nodePath = ""
quiet = false
rulesCustomizations = []
run = "onType"
validate = "on"
experimental = {}
problems = { shortenToSingleLine = false }


[language-server.emmet-ls]
args = ["--stdio"]
command="emmet-ls"

[language-server.pylsp.config.pylsp.plugins.pycodestyle]
maxLineLength = 120

[language-server.pylsp.config.pylsp.plugins.flake8]
maxLineLength = 120

[language-server.pylsp.config.pylsp.plugins.autopep8]
max-line-length = 120
