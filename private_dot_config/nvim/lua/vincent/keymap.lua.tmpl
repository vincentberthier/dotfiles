-- Show keys on terminals: showkey -a

local opts = { noremap = true, silent = true }
--[[ local term_opts = { silent = true } ]]

-- Alias
local keymap = vim.api.nvim_set_keymap

-- Space is leader key
vim.g.mapleader = " "
vim.g.maplocalleader = " "
keymap("", "<Space>", "<nop>", opts)

{{ if (or (eq .chezmoi.hostname "athena") (eq .chezmoi.hostname "gaia")) }}vim.g.clipboard = {
    name = "wl-clipboard",
    copy = { ["+"] = { "wl-copy" }, ["*"] = { "wl-copy"} },
    paste = { ["+"] = { "wl-paste"}, ["*"] = { "wl-paste"}},
    cache_enabled = true,
}{{ else }}vim.g.clipboard = {
    name = "xsel",
    copy = { ["+"] = { "xsel" }, ["*"] = { "xsel"} },
    paste = { ["+"] = { "xsel"}, ["*"] = { "xsel"}},
    cache_enabled = true,
}{{ end }}

-- Modes
--   normal mode = "n"
--   insert mode = "i"
--   visual mode = "v"
--   visual block mode = "x",
--   term mode = "t"
--   command mode = "c"

-- Increment / decrement
keymap("n", "<leader>+", "<C-a>", opts)
keymap("n", "<leader>-", "<C-x>", opts)


-- Split windows
keymap("n", "<leader>sv", "<C-w>v", opts)  -- split window vertically
keymap("n", "<leader>sh", "<C-w>s", opts)  -- split window vertically
keymap("n", "<leader>se", "<C-w>=", opts)  -- make split windows of equal height
keymap("n", "<leader>sx", ":close<CR>", opts)  -- close current split window

-- Navigate in buffers
keymap("n", "<S-n>", ":bnext<CR>", opts)
keymap("n", "<S-t>", ":bprevious<CR>", opts)
keymap("n", "<S-x>", ":bdelete<CR>", opts)

-- Resize split windows
keymap("n", "<C-Up>", ":resize +2<CR>", opts)
keymap("n", "<C-Down>", ":resize -2<CR>", opts)
keymap("n", "<C-Left>", ":vertical resize -2<CR>", opts)
keymap("n", "<C-Right>", ":vertical resize +2<CR>", opts)

-- Tabs
keymap("n", "<leader>to", ":tabn<CR>", opts)  -- open new tab
keymap("n", "<leader>tx", ":tabn<CR>", opts)  -- close current tab
keymap("n", "<leader>tn", ":tabn<CR>", opts)  -- go to next tab
keymap("n", "<leader>tp", ":tabn<CR>", opts)  -- go to previous tab

-- Escape insert mode fast
keymap("i", "vd", "<Esc>", opts)

-- Stay in indent mode
keymap("v", "<", "<gv", opts)
keymap("v", ">", ">gv", opts)

-- Show / hide the undo tree
keymap("n", "<leader>u", ":UndotreeShow<CR>", opts)

-- Move selected lines up or down
keymap("v", "<A-s>", ":m '>+1<cr>gv=gv", opts)
keymap("v", "<A-r>", ":m '<-2<cr>gv=gv", opts)
keymap("x", "<A-s>", ":move '>+1<CR>gv-gv", opts)
keymap("x", "<A-r>", ":m '<-2<CR>gv-gv", opts)

-- Copy / paste / delete
keymap("n", "x", '"_x', opts)  -- delete the character without saving it
keymap("n", "Y", "yg$", opts)  -- ???
-- Append the next line to the current one after a spaces
keymap("n", "J", "mzJ`z", opts)
-- Keep the cursor in the middle while scrolling
keymap("n", "<C-d>", "<C-d>zz", opts)
keymap("n", "<C-u>", "<C-u>zz", opts)

-- Search
keymap("n", "<leader>nh", ":nohl<CR>", opts)  -- remove the search highlights

-- Keep the cursor in the middle of the screen while searching for terms
keymap("n", "l", "nzzzv", opts)
keymap("n", "L", "Nzzzv", opts)

-- Paste over while keeping current copied data
keymap("x", "<leader>p", [["_dP]], opts)
keymap("x", "<leader>P", [["+p]], opts)

-- Copy to clipboard
keymap("n", "<leader>y", [["+y]], opts)
keymap("v", "<leader>y", [["+y]], opts)
keymap("n", "<leader>Y", [["+Y]], opts)

keymap("n", "<leader>d", [["_d]], opts)
keymap("v", "<leader>d", [["_d]], opts)

-- Disable Q and q
keymap("n", "Q", "<nop>", opts)
keymap("n", "q", "<nop>", opts)

-- Go to another session
keymap("n", "<C-f>", "<cmd>silent !tmux neww tmux-sessionizer<CR>", opts)

-- Quick fix navigation??
--keymap("n", "<C-s>", "<cmd>cnext<CR>zz", opts)
--keymap("n", "<C-r>", "<cmd>cprev<CR>zz", opts)
keymap("n", "<leader>t", "<cmd>lnext<CR>zz", opts)
keymap("n", "<leader>n", "<cmd>lprev<CR>zz", opts)

-- Replace current word in buffer
keymap("n", "<leader>s", [[:%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]], opts)
keymap("n", "<leader>x", "<cmd>!chmod +x %<CR>", { silent = true })

-- Plugin keymaps
keymap("n", "<leader>e", ":NvimTreeToggle<CR>", opts) -- Toggles netrw in a left bar
keymap("n", "<leader>sm", ":MaximizerToggle<CR>", opts) -- toggle split windows maximization

-- Telecope
-- Find files
keymap("n", "<leader>f",
    "<cmd>lua require'telescope.builtin'.find_files(require('telescope.themes').get_dropdown({ previewer = false }))<CR>"
    , opts)
keymap('n', '<leader>ff', "<cmd> Telescope find_files<CR>", opts)
keymap('n', '<leader>fs', "<cmd> Telescope live_grep<CR>", opts)
keymap('n', '<C-p>', "<cmd> Telescope git_files<CR>", opts)
keymap("n", "<leader>fb", "<cmd>Telescope buffers<CR>", opts)
keymap("n", "<leader>fh", "<cmd>Telescope help_tags<CR>", opts)
keymap("n", "<leader>fk", "<cmd> Telescope keymaps<CR>", opts)

-- LSP stuff
keymap("n", "<leader>lr", "<cmd> Telescope lsp_references<CR>", opts)
keymap("n", "<leader>ld", "<cmd> Telescope diagnostics<CR>", opts)
keymap("n", "<leader>ls", "<cmd> Telescope lsp_document_symbols<CR>", opts)
keymap("n", "<leader>lw", "<cmd> Telescope lsp_workspace_symbols<CR>", opts)
keymap("n", "<leader>rs", ":LspRestart<CR>", opts)

-- Git stuff
keymap("n", "<leader>gc", "<cmd>Telescope git_commits<CR>", opts)
keymap("n", "<leader>gfc", "<cmd>Telescope git_bcommits<CR>", opts)
keymap("n", "<leader>gb", "<cmd>Telescope git_branches<CR>", opts)
keymap("n", "<leader>gsp", "<cmd>Telescope git_status<CR>", opts)

-- Vim-Tmux
keymap("n", "C-t", "<cmd>TmuxNavigateLeft<CR>", opts)
keymap("n", "C-s", "<cmd>TmuxNavigateDown<CR>", opts)
keymap("n", "C-r", "<cmd>TmuxNavigateUp<CR>", opts)
keymap("n", "C-n", "<cmd>TmuxNavigateRight<CR>", opts)
keymap("n", "C-'", "<cmd>TmuxNavigatePrevious<CR>", opts)

-- Dap
keymap("n", "<F3>", "<cmd>lua require('dap').toggle_breakpoint()<CR>", opts)
keymap("n", "<leader>db", "<cmd>lua require('dap').toggle_breakpoint()<CR>", opts)
keymap("n", "<leader>dB", "<cmd>lua require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>", opts)
keymap("n", "<leader>dbl", "<cmd>lua require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>", opts)
keymap("n", "<leader>ds", "<cmd>lua require('dap').continue()<CR>", opts)
keymap("n", "<leader>dl", "<cmd>lua require('dap').run_last()<CR>", opts)
keymap("n", "<leader>de", "<cmd>lua require('dapui').eval()<CR>", opts)
keymap("n", "<F5>", "<cmd>lua require('dap').continue()<CR>", opts)
keymap("n", "<F10>", "<cmd>lua require('dap').step_over()<CR>", opts)
keymap("n", "<F11>", "<cmd>lua require('dap').step_into()<CR>", opts)
keymap("n", "<F12>", "<cmd>lua require('dap').step_out()<CR>", opts)

