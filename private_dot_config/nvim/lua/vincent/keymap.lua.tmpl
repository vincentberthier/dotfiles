-- Show keys on terminals: showkey -a

local opts = { noremap = true, silent = true }
--[[ local term_opts = { silent = true } ]]

-- Alias
local keymap = vim.api.nvim_set_keymap

-- Space is leader key
vim.g.mapleader = " "
vim.g.maplocalleader = " "
keymap("", "<Space>", "<nop>", opts)

{{- if (or (eq .chezmoi.hostname "athena") (eq .chezmoi.hostname "gaia")) }}
vim.g.clipboard = {
    name = "wl-clipboard",
    copy = { ["+"] = { "wl-copy" }, ["*"] = { "wl-copy"} },
    paste = { ["+"] = { "wl-paste"}, ["*"] = { "wl-paste"}},
    cache_enabled = true,
}
{{- else }}
vim.g.clipboard = {
    name = "xsel",
    copy = { ["+"] = { "xsel" }, ["*"] = { "xsel"} },
    paste = { ["+"] = { "xsel"}, ["*"] = { "xsel"}},
    cache_enabled = true,
}
{{- end }}

-- Modes
--   normal mode = "n"
--   insert mode = "i"
--   visual mode = "v"
--   visual block mode = "x",
--   term mode = "t"
--   command mode = "c"

local status_wk, wk = pcall(require, "which-key")
if not status_wk then
    print("Could not configure keymap")
    return
end

-- Normal mode
wk.register({
    ["<leader>"] = {
        ["+"] = { "<C-a>", "Increment value" },
        ["-"] = { "<C-x>", "Decrement value" },
        b = {
            name = "Buffers",
            c = { ":bdelete<CR>", "Closes the current buffer" },
        },
        c = {
            name = "Code",
        },
        d = {
            name = "Debugging",
            b = { "<cmd>lua require('dap').toggle_breakpoint()<CR>", "Toggle breakpoint" },
            B = { "<cmd>lua require('dap').set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>", "Conditional breakpoint" },
            l = { "<cmd>lua require('dap').set_breakpoint(nil, nil, vim.fn.input('Log point message: '))<CR>", "Logging breakpoint" },
            s = { "<cmd>lua require('dap').step_into()<CR>", "Step into" },
            n = { "<cmd>lua require('dap').step_over()<CR>", "Step over" },
            o = { "<cmd>lua require('dap').step_out()<CR>", "Step out" },
            c = { "<cmd>lua require('dap').continue()<CR>", "Start / Continue" },
            e = { "<cmd>lua require('dap').eval()<CR>", "Eval" },
            C = { "<cmd>lua require('dap').close()<CR>", "Close" },
            L = { "<cmd>lua require('dap').run_last()<CR>", "Close" },
        },
        e = { ":NvimTreeToggle<CR>", "Show files tree" },
        g = {
            name = "Git",
            c = { "<cmd> Telescope git_commits<CR>", "Show commits" },
            d = { "<cmd> Telescope git_bcommits<CR>", "Show buffer’s commits" },
            b = { "<cmd> Telescope git_branches<CR>", "Show branches" },
            S = { "<cmd> Telescope git_status<CR>", "Show status" },
            p = { "<cmd> Git push<CR>", "Git push" },
            s = { "<cmd> Git<CR>", "Git" },
        },
        i = {
            name = "Insert",
        },
        l = {
            name = "LSP",
            r = { "<cmd> Telescope lsp_references<CR>", "Find references" },
            d = { "<cmd> Telescope diagnostics<CR>", "Show diagnostics" },
            s = { "<cmd> Telescope lsp_document_symbols<CR>", "Show document’s symbols" },
            w = { "<cmd> Telescope lsp_workspace_symbols<CR>", "Show workspace’s symbols" },
            l = { ":LspRestart<CR>", "Restart LSP" },
        },
        m = {
            "Misc",
            e = { ":set spelllang=en<CR>", "English language" },
            f = { ":set spelllang=fr<CR>", "French language" },
            c = { ":set nospell<CR>:set nowrap<CR>", "Code mode" },
            t = { ":set spell<CR>:set wrap<CR>", "Text mode" },
            h = { ":nohl<CR>", "Clear highlights" },
            x = { "<cmd>!chmod +x %<CR>", "Make executable" },
        },
        r = { [[:%s/\<<C-r><C-w>\>/<C-r><C-w>/gI<Left><Left><Left>]], "Replace word" },
        s = {
            name = "Splits",
            v = { "<C-w>v", "Split vertically" },
            h = { "<C-w>v", "Split horizontally" },
            e = { "<C-w>=", "Equalize splits size" },
            c = { ":close<CR>", "Close the current split window" },
            m = { ":MaximizerToggle<CR>", "Toggles the current split window max size" },
            ["<Up>"] = { ":resize +2<CR>", "Increase height" },
            ["<Down>"] = { ":resize -2<CR>", "Decrease height" },
            ["<Left>"] = { ":vertical resize -2<CR>", "Decrease width" },
            ["<Right>"] = { ":vertical resize +2<CR>", "Increase width" },
        },
        t = {
            name = "Telescope",
            t = { "<cmd> lua require'telescope.builtin'.find_files(require('telescope.themes').get_dropdown({ previewer = false }))<CR>", "Quick find file"},
            f = { "<cmd> Telescope find_files<CR>", "Find file" },
            s = { "<cmd> Telescope live_grep<CR>", "Live grep" },
            g = { "<cmd> Telescope git_files<CR>", "Find git file" },
            b = { "<cmd> Telescope buffers<CR>", "Find buffer" },
            h = { "<cmd> Telescope help_tags<CR>", "Navigate help tags" },
            k = { "<cmd> Telescope keymaps<CR>", "Show active keybinds" },
        },
        T = {
            name = "Tabs",
            o = { ":tabn<CR>", "Open a new tab" },
            c = { ":tabc<CR>", "Closes the current tab" },
        },
        u = { ":UndotreeShow<CR>", "Show undo tree" },
        x = { 
            name = "Trouble",
            x = { ":TroubleToggle<CR>", "Toggle the Trouble pannel" },
            w = { ":TroubleToggle workspace_diagnostics<CR>", "Toggle workspace diagnostics window" },
            d = { ":TroubleToggle document_diagnostics<CR>", "Toggle document diagnostics window" },
            l = { ":TroubleToggle loclist<CR>", "Toggle Trouble localisation lists" },
            q = { ":TroubleToggle quickfix<CR>", "Toggle Trouble quickfist" },
        },
    },
    x = { '"_x', "Delete character without saving" },
    X = { '"_X', "Backspace without saving" },
    Y = { "yg$", "Copy to end of line" },
    ["<C-Up>"] = { ":resize +2<CR>", "Increase height" },
    ["<C-Down>"] = { ":resize -2<CR>", "Decrease height" },
    ["<C-Left>"] = { ":vertical resize -2<CR>", "Decrease width" },
    ["<C-Right>"] = { ":vertical resize +2<CR>", "Increase width" },
    ["<C-d>"] = { "<C-d>zz", "Scroll down" },
    ["<C-u>"] = { "<C-u>zz", "Scroll up" },
    ["<C-f>"] = { "<cmd>silent !tmux neww tmux-sessionizer<CR>", "Next tmux session" },
    -- DAP
    ["<F3>"] = { "<cmd>lua require('dap').toggle_breakpoint()<CR>", "Toggle breakpoint" },
    ["<F5>"] = { "<cmd>lua require('dap').continue()<CR>", "Start / Continue debugging" },
    ["<F10>"] = { "<cmd>lua require('dap').step_over()<CR>", "Step over" },
    ["<F11>"] = { "<cmd>lua require('dap').step_into()<CR>", "Step into" },
    ["<F12>"] = { "<cmd>lua require('dap').step_out()<CR>", "Step out" },
},
    -- options
    { mode = "n" }
)

-- Visual mode
wk.register({
    ["<leader>"] = {
        p = { [["_dP]], "Paste without copy" },
        P = { [["+P]], "Clip paste without copy" },
        y = { [["+y]], "Copy to clipboard" },
        d = { [["_d]], "Delete without copy" },
        D = { [["+d]], "Delete to clipboard" },
    },
    [">"] = { ">gv", "Increase indentation" },
    ["<"] = { "<gv", "Decrease indentation" },
},
-- options
{ mode = "v" }
)

-- Visual block line
wk.register({
    ["<leader>"] = {
        p = { [["_dP]], "Paste without copy" },
        P = { [["+P]], "Clip paste without copy" },
        y = { [["+y]], "Copy to clipboard" },
        d = { [["_d]], "Delete without copy" },
        D = { [["+d]], "Delete to clipboard" },
    },
    [">"] = { ">gv", "Increase indentation" },
    ["<"] = { "<gv", "Decrease indentation" },
},
-- options
{ mode = "x" }
)

-- Disable Q and q
keymap("n", "Q", "<nop>", opts)
keymap("n", "q", "<nop>", opts)

