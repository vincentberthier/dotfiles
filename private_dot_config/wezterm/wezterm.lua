-- Generated by Home Manager.
-- See https://wezfurlong.org/wezterm/

local wezterm = require 'wezterm'

-- Generated by Home Manager.
-- See https://wezfurlong.org/wezterm/

local wezterm = require 'wezterm'

-- See https://wezfurlong.org/wezterm/

-- Add config folder to watchlist for config reloads.
local wezterm = require("wezterm")
wezterm.add_to_config_reload_watch_list(wezterm.config_dir)

local mux = wezterm.mux
local act = wezterm.action

-- Equivalent to POSIX basename(3)
-- Given "/foo/bar" returns "bar"
-- Given "c:\\foo\\bar" returns "bar"
function basename(s)
  s = s or ""
  return string.gsub(s, '(.*[/\\])(.*)', '%2')
end

-- This table will hold the configuration.
local config = wezterm.config_builder()

-- Test on which desktop I am
local function is_hyprland()
  return os.getenv("DESKTOP_SESSION") == "hyprland"
end

-- Appearance configuration
config.color_scheme = "Catppuccin Mocha"

if is_hyprland() then
	config.background = {
		{
			source = { Color = "#000000" },
			height = "100%",
			width = "100%",
			opacity = 0.8,
		},
	}
else
	config.background = {
		{
			source = { File = "/home/vincent/.config/hypr/wallpaper.png" },
			hsb = { brightness = 0.15 },
		},
	}
end
config.default_cursor_style = "SteadyBar"
-- font
config.font = wezterm.font("Dank Mono")
config.font_size = 8
config.line_height = 1.1
config.adjust_window_size_when_changing_font_size = false
-- tab appearance
config.hide_tab_bar_if_only_one_tab = true
config.use_fancy_tab_bar = false
config.tab_bar_at_bottom = true
-- window appearance
config.window_decorations = "NONE"
config.window_frame = {
	font = wezterm.font({ family = "Dank Mono", weight = "Regular" }),
	font_size = 12.0,
	-- active_titlebar_bg = '#1e1e2e',
	active_titlebar_bg = "rgba(0, 0, 0, 0)",
	active_titlebar_fg = "#cdd6f4",
}
-- graphics
config.front_end = "WebGpu"
config.enable_wayland = true
-- scrollback
config.scrollback_lines = 10000

-- Inactive panes should be darker
config.inactive_pane_hsb = {
	saturation = 0.5,
	brightness = 0.4,
}

-- Keys configuration
config.use_dead_keys = true
config.disable_default_key_bindings = true

config.leader = { key = " ", mods = "CTRL|SHIFT", timeout_milliseconds = 2000 }
config.mouse_bindings = {
	{ event = { Down = { streak = 4, button = "Left" } }, mods = "NONE", action = act.SelectTextAtMouseCursor 'SemanticZone' }
}
config.keys = {
	{ key = "r", mods = "LEADER", action = act.ReloadConfiguration },
	{ key = "d", mods = "LEADER", action = act.ShowDebugOverlay },
  { key = "p", mods = "LEADER", action = act.ActivateCommandPalette },
  -- Splits
	{ key = 'k', mods = 'CTRL|SHIFT', action = act.CloseCurrentPane{ confirm = false } },
	{ key = 't', mods = 'CTRL|SHIFT', action = act.ActivatePaneDirection 'Prev' },
	{ key = 'n', mods = 'CTRL|SHIFT', action = act.ActivatePaneDirection 'Next' },
	{ key = 'v', mods = 'CTRL|SHIFT', action = act.SplitVertical { domain = 'CurrentPaneDomain' }, },
	{ key = 'h', mods = 'CTRL|SHIFT', action = act.SplitHorizontal { domain = 'CurrentPaneDomain' }, },
	{ key = "m", mods = "CTRL|SHIFT", action = act.TogglePaneZoomState },
	{ key = "c", mods = "LEADER", action = act.RotatePanes "Clockwise" },
	{ key = "UpArrow", mods = "CTRL|SHIFT", action = act.AdjustPaneSize { "Up", 5 } },
	{ key = "DownArrow", mods = "CTRL|SHIFT", action = act.AdjustPaneSize { "Down", 5 } },
	{ key = "LeftArrow", mods = "CTRL|SHIFT", action = act.AdjustPaneSize { "Left", 5 } },
	{ key = "RightArrow", mods = "CTRL|SHIFT", action = act.AdjustPaneSize { "Right", 5 } },
	-- Tabs
	{ key = "l", mods = "CTRL|SHIFT", action = act.ActivateTabRelative(1) },
	{ key = "d", mods = "CTRL|SHIFT", action = act.ActivateTabRelative(-1) },
	{ key = "o", mods = "CTRL|SHIFT", action = act.SpawnTab("CurrentPaneDomain") },
	-- Appearance
	{ key = "7", mods = "CTRL|SHIFT", action = act.IncreaseFontSize },
	{ key = "8", mods = "CTRL|SHIFT", action = act.DecreaseFontSize },
	{ key = "0", mods = "CTRL|SHIFT", action = act.ResetFontSize },
	-- Text manipulation
	{ key = "E", mods = "CTRL|SHIFT", action = act.ActivateCopyMode },
	{ key = "c", mods = "CTRL|SHIFT|ALT", action = act.CopyTo("ClipboardAndPrimarySelection") },
	{ key = "v", mods = "CTRL|SHIFT|ALT", action = act.PasteFrom("Clipboard") },
	-- Clear terminal
	{
		key = "Delete",
		mods = "CTRL|SHIFT",
		action = act.Multiple({
			act.ClearScrollback("ScrollbackAndViewport"),
			act.SendKey({ key = "L", mods = "CTRL" }),
		}),
	},
	-- Prompt navigation
	{ key = "UpArrow", mods = "SHIFT", action = act.ScrollByLine(-1) },
	{ key = "DownArrow", mods = "SHIFT", action = act.ScrollByLine(1) },
	-- Open URL
	{
		key = "u",
		mods = "LEADER",
		action = wezterm.action.QuickSelectArgs({
			label = "open url",
			patterns = {
				"https?://\\S+",
              "www.\\S+",
			},
			action = wezterm.action_callback(function(window, pane)
				local url = window:get_selection_text_for_pane(pane)
				wezterm.log_info("opening: " .. url)
				wezterm.open_with(url)
			end),
		}),
	},
	-- Other
	{ key = "b", mods = "LEADER", action = act.SendString("\x02") },
}

-- Copy mode
config.key_tables = {
	copy_mode = {
		-- Motions
		{ key = "t", mods = "NONE", action = act.CopyMode("MoveLeft") },
		{ key = "s", mods = "NONE", action = act.CopyMode("MoveDown") },
		{ key = "r", mods = "NONE", action = act.CopyMode("MoveUp") },
		{ key = "n", mods = "NONE", action = act.CopyMode("MoveRight") },
		{ key = "w", mods = "NONE", action = act.CopyMode("MoveForwardWord") },
		{ key = "b", mods = "NONE", action = act.CopyMode("MoveBackwardWord") },
		{
			key = "e",
			mods = "NONE",
			action = act.CopyMode("MoveForwardWordEnd"),
		},
		-- Line
		{
			key = "^",
			mods = "NONE",
			action = act.CopyMode("MoveToStartOfLineContent"),
		},
		{
			key = "$",
			mods = "NONE",
			action = act.CopyMode("MoveToEndOfLineContent"),
		},
		-- Jump
		{ key = ",", mods = "NONE", action = act.CopyMode("JumpReverse") },
		{ key = ";", mods = "NONE", action = act.CopyMode("JumpAgain") },
		{
			key = "F",
			mods = "SHIFT",
			action = act.CopyMode({ JumpBackward = { prev_char = false } }),
		},
		{
			key = "f",
			mods = "NONE",
			action = act.CopyMode({ JumpForward = { prev_char = false } }),
		},
		{
			key = "h",
			mods = "NONE",
			action = act.CopyMode({ JumpForward = { prev_char = true } }),
		},
		{
			key = "H",
			mods = "SHIFT",
			action = act.CopyMode({ JumpBackward = { prev_char = true } }),
		},
		-- Screen
		{
			key = "G",
			mods = "SHIFT",
			action = act.CopyMode("MoveToScrollbackBottom"),
		},
		{
			key = "g",
			mods = "NONE",
			action = act.CopyMode("MoveToScrollbackTop"),
		},
		{
			key = "T",
			mods = "SHIFT",
			action = act.CopyMode("MoveToViewportTop"),
		},
		{
			key = "N",
			mods = "SHIFT",
			action = act.CopyMode("MoveToViewportBottom"),
		},
		-- Selection
		{
			key = "y",
			mods = "NONE",
			action = act.Multiple({
				{ CopyTo = "ClipboardAndPrimarySelection" },
				{ CopyMode = "Close" },
			}),
		},
		{
			key = "v",
			mods = "NONE",
			action = act.CopyMode({ SetSelectionMode = "Cell" }),
		},
		{
			key = "v",
			mods = "CTRL",
			action = act.CopyMode({ SetSelectionMode = "Block" }),
		},
		{
			key = "V",
			mods = "SHIFT",
			action = act.CopyMode({ SetSelectionMode = "Line" }),
		},
		{
			key = "O",
			mods = "SHIFT",
			action = act.CopyMode("MoveToSelectionOtherEndHoriz"),
		},
		{
			key = "o",
			mods = "NONE",
			action = act.CopyMode("MoveToSelectionOtherEnd"),
		},
		-- Misc
		{ key = "Escape", mods = "NONE", action = act.CopyMode("Close") },
		{ key = "e", mods = "CTRL", action = act.CopyMode("Close") },
		-- Navigation
		{
			key = "d",
			mods = "CTRL",
			action = act.CopyMode({ MoveByPage = 1.0 }),
		},
		{
			key = "u",
			mods = "CTRL",
			action = act.CopyMode({ MoveByPage = -1.0 }),
		},
	},
}

function default_startup(cmd)
  	wezterm.log_info("opening new window, showing fastfetch")
  	cmd.args = cmd.args or { "fish", "-C", "fastfetch" }
    local tab, pane, window = mux.spawn_window(cmd)
end

-- function open_project(project, title)
-- 	local code_dir = wezterm.home_dir .. "/code/" .. project
-- 	local btop_tab, _, window = mux.spawn_window {
-- 		args = { "btop" },
-- 		cwd = code_dir,
-- 	}
-- 	btop_tab:set_title("󱐋")

-- 	-- the editor (top) pane first
-- 	local main_tab, editor_pane, _ = window:spawn_tab {
-- 		args = { "nix", "develop", "--no-warn-dirty", "--command", "hx" },
-- 	}
-- 	main_tab:set_title(title)

-- 	local build_pane = editor_pane:split {
-- 		direction = "Bottom",
-- 		size = 0.3,
-- 		args = { "nix", "develop", "--no-warn-dirty", "--command", "fish" },
-- 	}

--   -- if project ~= "tyrex/t-gate" then
--   --   return window
--   -- end

--   local bacon_tab, bacon_pane, _ = window:spawn_tab {
--     args = { "nix", "develop", "--no-warn-dirty", "--command", "bacon", "clippy-all" },
--   }
--   bacon_tab:set_title(" Bacon")
--   local bacon_pane2 = bacon_pane:split {
--     direction = "Right",
--     size = 0.5,
--     args = { "nix", "develop", "--no-warn-dirty", "--command", "bacon", "nextest" },
--   }
--   bacon_pane:split {
--     direction = "Bottom",
--     size = 0.5,
--     args = { "nix", "develop", "--no-warn-dirty", "--command", "bacon", "doctests" },
--   }
--   bacon_pane2:split {
--     direction = "Bottom",
--     size = 0.5,
--     args = { "nix", "develop", "--no-warn-dirty", "--command", "bacon", "spellcheck" },
--   }


-- 	return window
-- end

function initial_setup(cmd)
	-- the pbf window
	local pbf_tab, _, pbf_window = mux.spawn_window {
		args = { "fish", "-C", "hx pbf.txt" },
		cwd = cmd.cwd,
		set_environment_variables = cmd.set_environment_variables,
	}
	pbf_tab:set_title(" PbF")

	local update_tab, pane, _ = pbf_window:spawn_tab {
		args = { "fish", "-C", "maj_upgrade" },
	}
	update_tab:set_title("󰚰 Update")
end

-- configure startup (with full session when launched by Hyprland)
wezterm.on("gui-startup", function(cmd)
	cmd = cmd or {}
	local args = cmd.args or {}

  local mode = os.getenv("TERM_STARTUP_MODE") or "secundary"
  local desktop = os.getenv("DESKTOP_SESSION") or "unknown"
  wezterm.log_info("Desktop: " .. desktop)
  wezterm.log_info("Startup mode: '" .. mode .. "'")
  if mode == "initial" then
  	initial_setup(cmd)
  else
  	default_startup(cmd)
  end
  wezterm.log_info("Startup successful")
end)

-- This function returns the suggested title for a tab.
-- It prefers the title that was set via `tab:set_title()`
-- or `wezterm cli set-tab-title`, but falls back to the
-- title of the active pane in that tab.
-- taken from https://wezfurlong.org/wezterm/config/lua/window-events/format-tab-title.html?h=title
function tab_title(tab_info)
  local title = tab_info.tab_title
  -- if the tab title is explicitly set, take that
  if title and #title > 0 then
    return title
  end
  -- Otherwise, use the title from the active pane
  -- in that tab
  return tab_info.active_pane.title
end

wezterm.on('format-window-title', function(tab, pane, tabs, panes, config)
  local zoomed = ""
  if tab.active_pane.is_zoomed then
    zoomed = '[Z] '
  end

  local index = ""
  -- if #tabs > 1 then
  --   index = string.format('[%d/%d] ', tab.tab_index + 1, #tabs)
  -- end

  return zoomed .. index .. tab.tab_title
end)

wezterm.on(
  'format-tab-title',
  function(tab, tabs, panes, config, hover, max_width)
    local title = tab_title(tab)

    -- Nice in theory, in practice it’s always true and annoying
    -- local has_unseen_output = false
    -- for _, pane in ipairs(tab.panes) do
    -- 	if pane.has_unseen_output then
    -- 		has_unseen_output = true
    -- 		break
    -- 	end
    -- end

    -- if has_unseen_output then
    -- 	title = "   " .. title .. "  "
    -- 	return {
    -- 		{ Foreground = { Color = 'red' } },
    -- 		{ Text = title },
    -- 	}
    -- end

    return "  " .. title .. "  "
  end
)


-- and finally, return the configuration to wezterm
return config

