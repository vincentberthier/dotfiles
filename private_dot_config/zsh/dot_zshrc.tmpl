#!/bin/sh

# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.config/zsh/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

HISTFILE=~/.histfile

# Useful options
setopt autocd chaselinks pushd_silent # change directories
setopt extendedglob nomatch # Expansion & globbing 
setopt interactive_comments
# stty stop undef  # Prevents ctrl-s from freezing the terminal
zle_highlight=('paste:none')

# Completion
autoload -Uz compinit
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list '' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion::complete:*' gain-privileges 1
# zstyle ':completion::complete:lsof:*' menu yes select
zmodload zsh/complist
_comp_options+=(globdots)  # include hidden files
compinit

autoload -U up-line-or-beginning-search down-line-or-beginning-search
zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search

# Load useful functions
source "$ZDOTDIR/functions.zsh"

# Colours
autoload -Uz colors && colors
test -r "~/.dir_colors" && eval $(dircolors ~/.dir_colors)
export BAT_THEME="Catppuccin-mocha"
zsh_add_file "catppuccin_mocha-zsh-syntax-highlighting.zsh"

# Enable zoxide
{{ if (eq .chezmoi.hostname "px-1021") }}eval "$(${HOME}/.local/bin/zoxide init zsh)"{{ else }}eval "$(zoxide init zsh)"{{ end }}
zsh_add_file "fzf.zsh"

# Normal files to source
zsh_add_file "exports.zsh"
zsh_add_file "vim-mode.zsh"
zsh_add_file "aliases.zsh"

# Plugins
zsh_add_plugin "zsh-users/zsh-autosuggestions"
zsh_add_plugin "zsh-users/zsh-syntax-highlighting"
zsh_add_plugin "hlissner/zsh-autopair"
zsh_add_plugin "zsh-users/zsh-history-substring-search"
zsh_add_plugin "MichaelAquilina/zsh-auto-notify"
zsh_add_completion "esc/conda-zsh-completion" false
# More plugins: https://github.com/unixorn/awesome-zsh-plugins
# More completions: https://github.com/zsh-users/zsh-completions

# Theme
zsh_add_plugin "romkatv/powerlevel10k"
zsh_add_file "plugins/powerlevel10k/powerlevel10k.zsh-theme"
zsh_add_file "prompt.zsh"

# General keybinds
bindkey '^[[H' beginning-of-line
bindkey '^[[F' end-of-line
bindkey '^[[3~' delete-char

# Vi mode & keybinds
bindkey -v
bindkey -M vicmd t vi-backward-char
bindkey -M vicmd n vi-forward-char
bindkey '^R' history-incremental-search-backward
bindkey '^S' history-incremental-search-forward
bindkey -M vicmd k vi-find-next-char-skip
bindkey -M vicmd K vi-find-prev-char-skip

# Auto-suggestions keybinds
bindkey '^ ' autosuggest-execute  # press ctrl+space to accept and execute the suggestion

# history-substring keybinds
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey -M vicmd s history-substring-search-down
bindkey -M vicmd r history-substring-search-up

# Fixed Home / End in tmux
bindkey "^[OF" end-of-line
bindkey "^[OH" beginning-of-line
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line

# Set the terminal’s window title dynamically
autoload -Uz add-zsh-hook

function xterm_title_precmd () {
	print -Pn -- '\e]2;%n@%m: %~\a'
	[[ "$TERM" == 'screen'* ]] && print -Pn -- '\e_\005{g}%n\005{-}@\005{m}%m\005{-}: \005{B}%~\005{-}\e\\'
}

function xterm_title_preexec () {
	print -Pn -- '\e]2;%n@%m: %~ %# ' && print -n -- "${(q)1}\a"
	[[ "$TERM" == 'screen'* ]] && { print -Pn -- '\e_\005{g}%n\005{-}@\005{m}%m\005{-}: \005{B}%~\005{-} %# ' && print -n -- "${(q)1}\e\\"; }
}

if [[ "$TERM" == (Eterm*|alacritty*|aterm*|gnome*|konsole*|kterm*|putty*|rxvt*|screen*|tmux*|xterm*) ]]; then
	add-zsh-hook -Uz precmd xterm_title_precmd
	add-zsh-hook -Uz preexec xterm_title_preexec
fi

precmd() {
    print -Pn "\e]133;A\e\\"
}

{{ if (eq .chezmoi.hostname "px-1021") }}
    zsh_add_file "cls.zsh"
{{ else if (eq .chezmoi.hostname "visu01.sis.cnes.fr") }}
    zsh_add_file "cnes.zsh"
{{ end }}

if [[ -f /usr/bin/python3 ]]; then please; fi

